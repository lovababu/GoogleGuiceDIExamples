##Just In Time Bindings.
  -- The bindings in a module are called Explicit bindings, Guice injector uses them whenever they are available.
     If a type needed but there is not as explicit binding, the injector will attempt to create a Just-In-Time bindings.
     JIT bindings also called Implicit bindings.

  -- Eligible constructors.
     Guice can create bindings for concrete types by using the type's injectable constructor. This is either a non-private,
     no-arguments constructor, or a constructor with the @Inject annotation.

  -- @ImplementedBy.
     Annotate types tell the injector what their default implementation type is.
     The @ImplementedBy annotation acts like a linked binding, specifying the subtype to use when building a type.
     If a type is in both a bind() statement (as the first argument) and has the @ImplementedBy annotation, the bind() statement is used.
     The annotation suggests a default implementation that can be overridden with a binding. Use @ImplementedBy carefully;
     it adds a compile-time dependency from the interface to its implementation.

  -- @ProvidedBy.
     @ProvidedBy tells the injector about a Provider class that produces instances.
     Like @ImplementedBy, if the type is annotated and used in a bind() statement, the bind() statement will be used.

### Scopes.
  -- Singleton.
     EagerSingleton and LazySingleton.
  -- RequestScoped.
     For web applications.
  -- SessionScoped.
     For web applications.

### Injections.
  -- Constructor Injection.
     @Inject annotation on constructor, If your class has no @Inject annotated constructor,
     Guice will use public no arg constructor if it exists.

  -- Method Injection.
     Guice can inject methods that have the @Inject annotation.

  -- Field Injection.
     Guice inject fields with the @Inject annotation. Avoid field injection with final fields, which make weak semantics.

  -- Optional Injection.
     Occassionally its convenient to use a dependency when it exists and to fallback to a default when it doesn't.
     Method and field injections may be optional, which causes Guice to silently ignore when dependency not available.
     To use optional injection @Inject(optional=true)

  -- OnDemand Injection.
     Method and field injection can be used to initialize an existing instance. You can use the Injector.injectMembers API.

  -- Static Injection.
     Use requestStaticInjection() in a module to specify classes to be injected at injector-creation time:
     Static members will not be injected at instance-injection time. This API is not recommended for general use because
     it suffers many of the same problems as static factories

  -- Automatic Injection.
     Guice automatically injects the fallowing.
     - toInstance() in bind statement. Ex. bind(A.class).toInstance(AImpl.class);
     - toProvider() in bind statement. Ex. bind(A.class).toProvider(AImpl.class);

